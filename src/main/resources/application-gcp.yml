info:
  nais:
    clientid: ${nais.client.id}
    project: ${gcp.team.project.id}
    cluster: ${nais.cluster.name}
    image: ${nais.app.image}
    app: ${nais.app.name}
    namespace: ${nais.namespace}
management:
  endpoint:
    env:
      additional-keys-to-sanitize: "client-jwk,jwk,jwks"

spring:
  cloud:
    gcp:
      project-id: ${gcp.team.project.id}
  flyway:
    out-of-order: true
  datasource:
    url: jdbc:postgresql://${db.host}:${db.port}/${db.database}
    username: ${db.username}
    password: ${db.password}
    hikari:
      connection-test-query: SELECT 1
      maximum-pool-size: 2
  devtools:
    restart:
      enabled: false
    add-properties: false
    livereload:
      enabled: false
  kafka:
    bootstrap-servers: ${kafka.brokers}
    properties:
      basic:
        auth:
          user:
            info: ${kafka.schema.registry.user}:${kafka.schema.registry.password}
          credentials:
            source: USER_INFO
      schema:
        registry:
          url: ${kafka.schema.registry}
      endpoint:
        identification:
          algorithm: ''
    security:
      protocol: SSL
    ssl:
      trust-store-location: file:${kafka.truststore.path}
      trust-store-type: JKS
      trust-store-password: ${kafka.credstore.password}
      key-store-location: file:${kafka.keystore.path}
      key-store-type: PKCS12
      key-store-password: ${kafka.credstore.password}
    consumer:
      group-id: ${spring.application.name}-dev
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    producer:
      acks: all
      client-id: ${spring.application.name}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
no.nav:
  security:
    jwt:
      client:
        registration:
          digdir-krr-proxy:
            token-exchange:
              audience: ${nais.cluster.name}:team-rocket:digdir-krr-proxy
            well-known-url: ${token.x.well.known.url}
            grant-type: urn:ietf:params:oauth:grant-type:token-exchange
            authentication:
              client-id: ${token.x.client.id}
              client-jwk: ${token.x.private.jwk}
              client-auth-method: private_key_jwt

          client-credentials-pdl:
            token-endpoint-url: ${azure.openid.config.token.endpoint}
            grant-type: client_credentials
            scope: ${pdl.scope}
            authentication:
              client-id: ${azure.app.client.id}
              client-jwk: ${azure.app.jwk}
              client-auth-method: private_key_jwt

          isdialogmelding:
            token-exchange:
              audience: ${nais.cluster.name}:teamsykefravr:isdialogmelding
            well-known-url: ${token.x.well.known.url}
            grant-type: urn:ietf:params:oauth:grant-type:token-exchange
            authentication:
              client-id: ${token.x.client.id}
              client-jwk: ${token.x.private.jwk}
              client-auth-method: private_key_jwt

          pdl-api:
            token-exchange:
              audience: ${env}-fss:pdl:pdl-api
            well-known-url: ${token.x.well.known.url}
            grant-type: urn:ietf:params:oauth:grant-type:token-exchange
            authentication:
              client-id: ${token.x.client.id}
              client-jwk: ${token.x.private.jwk}
              client-auth-method: private_key_jwt

          sokos-kontoregister-person:
            token-exchange:
              audience: ${nais.cluster.name}:okonomi:sokos-kontoregister-person
            well-known-url: ${token.x.well.known.url}
            grant-type: urn:ietf:params:oauth:grant-type:token-exchange
            authentication:
              client-id: ${token.x.client.id}
              client-jwk: ${token.x.private.jwk}
              client-auth-method: private_key_jwt

          client-credentials-arkiv:
            token-endpoint-url: ${azure.openid.config.token.endpoint}
            grant-type: client_credentials
            scope: ${joark.scope}
            authentication:
              client-id: ${azure.app.client.id}
              client-jwk: ${azure.app.jwk}
              client-auth-method: private_key_jwt

      issuer:
        idporten:
          discovery-url: ${token.x.well.known.url}
          accepted-audience: ${token.x.client.id}

vl:
  standard:
    topic: aap.soknad-sendt.v1
  ettersending:
    topic: aap.soknad-ettersendt.v1
  utland:
    topic: aap.utland-soknad-sendt.v1
pdl:
  enabled: true
  base-uri: https://pdl-api.${env}-fss-pub.nais.io/graphql
  scope: api://${env}-fss.pdl.pdl-api/.default
joark:
  enabled: true
  base-uri: https://dokarkiv.${env}-fss-pub.nais.io
arbeidsforhold:
  enabled: false
organisasjon:
  enabled: false
virus:
  enabled: true
saf:
  enabled: true
pdf:
  enabled: true
krr:
  enabled: true
minside:
  nais:
    app: ${nais.app.name}
    namespace: ${nais.namespace}
  done: min-side.aapen-brukernotifikasjon-done-v1
  beskjed:
    enabled: true
    topic: min-side.aapen-brukernotifikasjon-beskjed-v1
  oppgave:
    enabled: true
    topic: min-side.aapen-brukernotifikasjon-oppgave-v1
    preferertekanaler:
      - SMS
      - EPOST

buckets:
  project: ${gcp.team.project.id}
  kms:
    ring: ${mellomlagring.navn}-kms
    key: ${mellomlagring.navn}-kmskey
  mellom:
    navn: ${mellomlagring.navn}
    purring:
      delay: 3600
      eldreEnn: 12d
      enabled: false
    subscription:
      navn: ${mellomlagring.navn}-subscription2
      topic: ${mellomlagring.navn}-topic2
  vedlegg:
    navn: ${vedlegg.navn}
    typer:
      - application/pdf
      - image/jpeg
      - image/png